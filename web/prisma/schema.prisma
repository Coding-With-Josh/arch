generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProviderType {
  GOOGLE
  GITHUB
  // Add more wallet types as needed
}

enum WalletProviderType {
  METAMASK
  PHANTOM
  BYBIT
  WALLETCONNECT
  // Add more wallet types as needed
}

model AuthProvider {
  id        String           @id @default(uuid())
  type      AuthProviderType
  users     User[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  name                String?
  username            String?
  password            String?
  profilePhoto        String?
  themePreference     String?        @default("dark")
  accentColor         String?        @default("blue")
  onboardingCompleted Boolean        @default(false)
  role                Role           @default(USER)
  isActive            Boolean        @default(false)
  isVerified          Boolean        @default(false)
  authProviderId      String?
  walletProviderId    String
  authProvider        AuthProvider?  @relation(fields: [authProviderId], references: [id])
  walletProvider      WalletProvider @relation(fields: [walletProviderId], references: [id])
  walletAddress       String?
  avatarUrl           String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  lastUrl             String?
  lastLogin           DateTime?
  lastActive          DateTime?

  organizations      UserOrganization[]
  ownedOrganizations Organization[]     @relation("OwnedOrganizations")
  activities         Activity[]
  onboardingStep     Int                @default(0)
}

model WalletProvider {
  id             String   @id @default(cuid())
  name           String   @unique
  displayName    String
  isActive       Boolean  @default(true)
  users          User[]
  connectedAt    DateTime @default(now())
  disconnectedAt DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Organization {
  id               String   @id @default(uuid())
  name             String
  slug             String   @unique
  ownerId          String
  logo             String?
  planType         PlanType @default(FREE)
  stripePriceId    String?
  stripeCustomerId String?
  avatarUrl        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  users          UserOrganization[]
  projects       Project[]
  billingHistory BillingHistory[]
  apiKeys        ApiKey[]
  owner          User               @relation("OwnedOrganizations", fields: [ownerId], references: [id], onDelete: Cascade)
}

enum PlanType {
  FREE
  GOLD
  SILVER
  TITANIUM
  ENTERPRISE
}

model UserOrganization {
  id             String           @id @default(uuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(VIEWER)
  inviteStatus   InviteStatus     @default(ACCEPTED)
  joinedAt       DateTime         @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum OrganizationRole {
  OWNER
  ADMIN
  DEVELOPER
  VIEWER
}

enum Role {
  ADMIN
  USER
  TESTER
  DEVELOPER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Project {
  id             String      @id @default(uuid())
  name           String
  slug           String      @unique
  icon           String?
  organizationId String
  type           ProjectType
  repository     String?
  deploymentUrl  String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deployments  Deployment[]
  apiKeys      ApiKey[]
  activities   Activity[]
  sandboxes    Sandbox[]    // New relation
  templates    Template[]   // New relation
}

enum ProjectType {
  WEB
  API
  MOBILE
  DESKTOP
  IOT
  BLOCKCHAIN
  AI
  MACHINE_LEARNING
  DATA_SCIENCE
  HACKATHON
  COMMUNITY_PROJECT
  OTHER
}

// New models for Studio/Sandbox functionality
model Sandbox {
  id          String       @id @default(uuid())
  name        String
  projectId   String
  templateId  String?
  files       SandboxFile[]
  environment Json?        // Store environment variables
  settings    Json?        // Store editor/sandbox settings
  isPublic    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  template    Template?   @relation(fields: [templateId], references: [id])
  snapshots   Snapshot[]
}

model SandboxFile {
  id        String   @id @default(uuid())
  sandboxId String
  path      String
  content   String   @db.Text
  type      String   // file extension or type
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sandbox   Sandbox    @relation(fields: [sandboxId], references: [id], onDelete: Cascade)
}

model Template {
  id          String    @id @default(uuid())
  name        String
  description String?
  type        String    // e.g., 'react', 'node', 'universal'
  files       Json      // Template files structure
  projectId   String?   // Optional: if template belongs to specific project
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  project     Project?  @relation(fields: [projectId], references: [id])
  sandboxes   Sandbox[]
}

model Snapshot {
  id        String   @id @default(uuid())
  sandboxId String
  name      String
  files     Json     // Snapshot of sandbox files
  createdAt DateTime @default(now())

  sandbox   Sandbox  @relation(fields: [sandboxId], references: [id], onDelete: Cascade)
}

model Deployment {
  id         String           @id @default(uuid())
  projectId  String
  status     DeploymentStatus
  commitHash String?
  branch     String?
  logs       String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum DeploymentStatus {
  QUEUED
  BUILDING
  SUCCEEDED
  FAILED
}

model BillingHistory {
  id              String   @id @default(uuid())
  organizationId  String
  amount          Float
  currency        String
  status          String
  paymentMethod   String // STRIPE, USDC, SOL, ETH
  transactionHash String?
  createdAt       DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id             String    @id @default(uuid())
  name           String
  key            String    @unique
  organizationId String
  projectId      String?
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project      Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Activity {
  id        String   @id @default(uuid())
  userId    String
  projectId String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id])
}
